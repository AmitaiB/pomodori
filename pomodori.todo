INBOX:
- I created a Stop button while on break. I just want to implement a way to stop the timer temporarily while on break.
- @history new controller action to query kirbydb and return all pomodoros 3
- search for macruby appliations open source (I think I saw many of them once) and download the sources. HAve a look to see how do they packaged the application, if macruby is embedded maybe. 1
- instead of changing backgound color of the disabled input text just look at how a label is created and move it to a big giant label. Print on the label running or statistics about yesterday and today. Change it back to an input box when you're done.
- every 4 tomatoes, at the end of the fourth after submitting the descr, show a small alert that it's time to take a longer break. If yes, instead of starting 5 mins break the timer is set to 25 mins break. Then a real tomato will start. If no just proceed with a 5 mins break. 3
- @bug copy and paste on the description box is not possible
- @lowprio a preference panel where you can set to have a different alarm sound, different alarm volume or no alarm at all

"Pomodoro history": As a Pomodoro user I want to see the Pomodoro history so that I know what I did yesterday:
- @history new window to show history 3
- @history new button to open history on main timer window 1
- @history spike scrollable grid-table views 1
- @history use grid view to show history as scrollable table 1

- always show today's pomodoros worked so far, yesterday's total amount worked on main timer window
- make the view quicksilver-like with a keystroke sequence to activate it
- always show the timer on the menu bar
- bring input box to front at the end of the 25 mins timer

KNOWN ISSUES:
- connect the 'return' key pressed event to the submit button 2 (5) I spent some time on this but with my scarce knowledge of Cocoa I couldn't find a solution. I tried to tweak on a MacRuby example trying to intercept a key pressed event without success. I think it's better I move on hoping that in the future I'll be able to fix this quickly.
- Encoding from text field: the string you obtain from a text_field instance is UTF-16 (text_field.to_s.encoding). UTF-16 is not even in the list of supported Ruby 1.9 encodings (Encoding.list) but there is a BE/LE specification. If you call the match operator on a UTF-16 string you have a "`=~': regexp preprocess failed: too short escaped multibyte character (ArgumentError)". So I had to convert the string and since neither force_encoding nor encode! works in MacRuby, I had to move the string to bytes and back to string. This is not a final solution of course, because I'm stripping relevant part of multibyte strings. The fix is in pomodoros.rb class fix_encoding method.
- Embedding MacRuby: I tried with the install_name_tool 
  -change /Library/Frameworks/MacRuby.framework/Versions/0.4/usr/lib/libmacruby.dylib   
  ../Frameworks/MacRuby.framework/Versions/0.4/usr/lib/libmacruby.dylib
  Pomodori.app/Contents/MacOS/Pomodori
which changes the dylib dependencies of the executable. The problem is that it doesn't work with the relative path passed. But if you want to go absolute, then it depend from where the application is installed. If /Applications, I can stuck the absolute path there, but I don't like it. So the plan is to wait some more time and hopefully MacRuby will be part of Leopard snow edition.