TODAY: shooting for 10 ()
- connect the 'return' key pressed event to the submit button 2
- when the submit button is pressed the timer restarts from 5 minutes 2
    Need to change the countdown timer to start again, moving more logic into the start method
    Maybe passing the number of minutes as parameter
- When the 5 minutes are done, use a callback method that restarts directly another 25 minutes without manual intervention 1

- spike: play sound with hotcocoa 2
- play alarm bell at the end of countdowns 2
    I want the same wav 3-2-1 is using in the Resource folder
- disable the input box if the timer is running. the only way to write something is when the timer is in the "Done" state 2

HISTORY:
- spike: collapsable view in hotcocoa 2
- spike: table view with hotcocoa 4
- show list of pomodoros worked so far right under the input box as paginated grid view 4
- make the history collapsible and closed/hidden by default

REPORTS:
- always show today's pomodoros worked so far, yesterday's total amount worked right below the input box and above the collapsed history view.

INTERFACE:
- make the view quicksilver-like with a keystroke sequence to activate it
- always show the timer on the menu bar
- bring input box to front at the end of the 25 mins timer

KNOWN ISSUES:
- Encoding from text field: the string you obtain from a text_field instance is UTF-16 (text_field.to_s.encoding). UTF-16 is not even in the list of supported Ruby 1.9 encodings (Encoding.list) but there is a BE/LE specification. If you call the match operator on a UTF-16 string you have a "`=~': regexp preprocess failed: too short escaped multibyte character (ArgumentError)". So I had to convert the string and since neither force_encoding nor encode! works in MacRuby, I had to move the string to bytes and back to string. This is not a final solution of course, because I'm stripping relevant part of multibyte strings. The fix is in pomodoros.rb class fix_encoding method.
- Embedding MacRuby: I tried with the install_name_tool 
  -change /Library/Frameworks/MacRuby.framework/Versions/0.4/usr/lib/libmacruby.dylib   
  ../Frameworks/MacRuby.framework/Versions/0.4/usr/lib/libmacruby.dylib
  Pomodori.app/Contents/MacOS/Pomodori
which changes the dylib dependencies of the executable. The problem is that it doesn't work with the relative path passed. But if you want to go absolute, then it depend from where the application is installed. If /Applications, I can stuck the absolute path there, but I don't like it. So the plan is to wait some more time and hopefully MacRuby will be part of Leopard snow edition.